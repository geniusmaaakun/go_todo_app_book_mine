詳解GO

便利コマンド
go test -bench
-race で競合検知

2 context
キャンセル通知など
contextにhttpクライアント情報（IP）などをつめておく。ログに使う。

3 database/sql
標準でコネクションプールする
アプリケーション終了までcloseしなくていい
よく使われるRDB管理のパッケージ

4 可視性とGo
go modules
go getで取得するバージョンの違い

5 go mod
バージョニング方法 gitを使う
go get

6　オブジェクト指向


7 インターフェース
インターフェースのnil値の注意
interfaceは最小限

8 エラーハンドリング
errors.Newとfmt.Errorfの使い分けはverbを使うかどうか
fmt.Errorfでどこでエラーが起きたかをラップしてわかるようにできる
エラーラッピング Is As
独自エラーをIsで判別
何度もif err != nil はGoの仕様と考える
panicは自己回復できないところで使う cssファイルがないなど

9　無名関数、クロージャ
無名関数をゴルーチンとして扱う場合は外部変数などを内部で使わない

10 環境変数の扱い方
環境変数のテスト
t.setenv

11 Goの依存性の注入
インタフェースを後から注入する方法

12 ミドルウェアパターン
複数のハンドラで共通の処理を行いたい場合にミドルウェアを作るといい
ハンドラの前後処理を追加できる
ミドルウェアシグネチャ(interface)を拡張したミドルウェアパターン
リクエストボディをログに残すミドルウェアはバッファにコピーしてから行う


13 ハンズオン go_todo_app_mine
なぜそうするのかを理解する為、テストを書きながら修正を加える
いいコードはテスト可能。テストしにくいコードは書き直しの対象


14
シンプルなサーバーテスト


15
環境変数
github actionsの設定


16
クリーンアーキテクチャー
責務を分ける


17
エンドポイントの追加
ハンドラー作成
テーブルドリブンテスト
クリーンアーキテクチャー


18
データベース設定

マイグレーションツール
Makefile更新
Docker起動

github actionsでもSQLコンテナを起動する
test.yamlに設定追加

sqlxを使う
sqlに対するテストコード
github actionsで実行される



19 
DB操作とhandlerの操作を責務分けすることでテストしやすくする

ハンドラの中でDB操作などのロジックも組み込まれている為テストしにくい
疎結合にしてテストしやすくする

3つのパッケージに分ける。それぞれの責務を小さくする
handler: HTTPリクエストとレスポンスの処理を行うパッケージ
store: 永続化操作を行う
service: 永続化操作とアプリケーションロジック、ビジネスロジックの実装を組み合わせて期待される挙動を実装する

またインターフェースを挟むことで、他のパッケージの実装内容に影響しないテストコードを書ける

httpハンドラーの実装を分解する
handler/service.go
ビジネスロジックと永続化に関わる処理を取り除く
インターフェースを定義することで、パッケージの参照を防ぐ。モック処理に入れ替えることができる


go generateを用いたモックの自動生成
mockパッケージを使う
go generateでモックファイルが作成される




ユーザー登録機能の追加


20
HeaderとしてクライアントからJWTが送られてくることを想定。
この部分JWTを保存したり、送信の実装はフロントエンドで行う

JWT Redisを使った認証機能
このルートディレクトリの中身

実装すること
登録済みユーザー情報を使ってアクセストークンを発行するログイン機能
ログインユーザーのみのAPIの利用を許可する
アクセストークンに含まれる識別情報を利用する
管理者権限のユーザーのみがアクセスできる機能

使うテクニック
redisを使ったキャッシュ
JWTを使ったアクセストークンの取り扱い
go embedファイル埋め込み
ミドルウェアパターンを使ったHTTPヘッダー情報をContextに埋め込み、Serviceに伝達
テストの事前データ作成を効率かするフィクスチャ

Redis
DockerでRedisの準備
github actionsでのワークフローに追加
store/kvs.goにコード追加
テストコードも追加

JWT
authにコード追加
opensslでRSAキーを作成 秘密鍵　公開鍵
アクセストークンの作成
モックも作成

ログインエンドポイントの追加
handler/ligoin.go
service/login.goの追加
store/user.goに追加
muxにエンドポイントの追加

midlewareパターンを使った認証機能
ミドルウェアを間に挟み、ヘッダーからトークンを読み取る
タスク追加、一覧表示はログインユーザーのみ行えるように変更